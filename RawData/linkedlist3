
Doubly Linked List

কম্পিউটার সায়েন্সের ভাষায় ডাবলি লিংকড লিস্ট হচ্ছে এক ধরনের linked data structure যেখানে node নামের কিছু রেকর্ড sequentially একটার সাথে আরেকটা connected থাকে। প্রতিটা নোডে এক বা একাধিক data field থাকতে পারে। আর লিস্টের সাথে যুক্ত থাকার জন্য ২ টিlink থাকে, যাদেরকে চিহ্নিত করা যায় next ও previous link নামে। Doubly Linked List এর head node এর previous link হবে NULL. একই ভাবে লিস্টের সর্বশেষ নোডের next link হবে NULL. অর্থাৎ head নােড তার আগের নােড হিসাবে পয়েন্ট করবে NULL-কে। আর tail node (সর্বশেষ নােড) তার পরের নােড হিসাবে পয়েন্ট করবে NULL-কে। এগুলোর মাধ্যমে আমরা লিস্টের শুরু ও শেষ বুঝতে পারব খুব সহজেই।

Operations of Doubly Linked List

Singly Linked List এর মতই Doubly Linked List এর অপারেশনগুলো করা যায়। এই পোস্টে শুধুমাত্র ৪ টি অপারেশন দেখানাে হবে। 

• Insert a node at tail
• Insert a node at front
• Traverse doubly linked list forward order
• Traverse doubly linked list reverse order

Applications of Doubly Linked List

* Browser এ BACK বাটন ফিচার ইমপ্লিমেন্ট করার সময় কাজে লাগতে পারে

* কোনাে অ্যাপ্লিকেশনে Most Recently Used ফাইলের লিস্ট দেখানার জন্য ব্যবহৃত হতে পারে

* Doubly Linked List এর সাহায্যে Stack, Hash Table, Binary Tree ইমপ্লিমেন্ট করা যায়

* মিউজিক প্লেয়ারে PREVIOUS - NEXT মিউজিক প্লে করার ফিচার ইমপ্লিমেন্ট করার ক্ষেত্রে

Advantages over Singly Linked List

* Forward ও backward উভয় দিকেই traverse করা যায়

* Singly Linked List এর চেয়ে Doubly Linked List এর কোনো একটা নোড ডিলেট করা সহজ। Singly Linked List এ কোনো একটা নোড ডিলেট করার জন্য হিসাব করে ঐ নোডের আগের নােডের রেফারেন্স বের করতে হয়। কিন্তু Doubly Linked List এ যেহেতু previous node এর রেফারেন্স থাকেই তাই আলাদা ভাবে আর চিন্তা করতে হয় না 

Disadvantage over Singly Linked List

* প্রতিটা নােডে previous node এর রেফারেন্স স্টোর করার জন্য এক্সট্রা একটা পয়েন্টার রাখতে হয়। এতে মেমরি বেশি খরচ হয়

* Node এর insert, delete এর ক্ষত্রে next ও previous উভয় পয়েন্টারকেই খেয়াল করে আপডেট করতে হয়।

Define a node of Doubly Linked List

struct linked_list
{
    int number;
    struct linked_list *next;
    struct linked_list *previous;
};

typedef struct linked_list node;
node *head=NULL, *tail=NULL;

Insert node at tail of a Doubly Linked List

একটা ফাংশন লিখবাে যার কাজ হবে লিস্টের tail নোডের পরে একটা নোড যুক্ত করা। head ও tail নামের দুইটা পয়েন্টার রাখা হয়েছে। লিস্টের প্রথম নোডের মেমরি লােকেশনটা রাখা থাকবে head এ, আর শেষ নােডের লােকেশনটা রাখা থাকবে tail এ। তাই এই head ও tail এর মাধ্যমে লিস্টের প্রথম ও শেষ নােডে access করা যাবে। যেহেতু পয়েন্টারের মাধ্যমে কাজ হচ্ছে তাই head ->number = 10; লিখলে লিস্টের শুরুর নােডের number এর মান assign হবে 10. আরাে ক্লিয়ার হবার জন্য বলি, তুমি যদি লিস্টে ১০ টা নােড যাগ করাে তাহলে মেমরিতে এই ১০ টা নোডের লিস্টের পাশাপাশি আরো ২ টা নােড স্টোর থাকবে। বাকি ২ টা নােড হচ্ছে head ও tail.

নতুন একটা নােড লিস্টে যােগ করার আগ মুহূর্ত পর্যন্ত tail node এর next পয়েন্টার ভেরিয়েবলটি পয়েন্ট করে ছিল NULL-কে। আমরা যদি নতুন নােডটি (নাম দিলাম newNode) লিস্টের শেষে যোগ করতে চাই তাহলে tail- &gt; next এর মধ্যে assign করতে হবে newNode এর মেমরি অ্যাড্রেস। অর্থাৎ tail -> next = newNode; ফলে সর্বশেষ নোডটি আমাদের newNode কে next node %3D হিসাবে পয়েন্ট করলাে। newNode বানানার সময়ই এর next ও previous পয়েন্টারে NULL বসিয়ে দেয়া হয়েছে। newNode যেহেতু সর্বশেষ নােড তাই এর next এ থাকবে NULL (অন্য কোনাে নােডকে পয়েন্ট করবে না, কারণ এটাই শেষ নোড)। কিন্তু newNode এর previous হিসাবে কোন নােডটা থাকবে? এর previous node হবে tail node. তাই newNode->previous=tail;

আচ্ছা! tail node টা এখন লিস্টের যেই নােডকে পয়েন্ট করে আছে (newNode এর আগের নোড) সেটা কি আদৌ সর্বশেষ নােড? সেটা কিন্তু আর শেষ নোড হিসাবে মেমরিতে নাই (সেটা এখন শেষের আগের নােড)। তাই tail নামের যেই এক্সট্রা একটা নোড নিয়ে আমরা কাজ করছি এর মেমরি অ্যাড্রেসটা newNode এর অ্যাড্রেস দিয়ে আপডেট করে দিব। tail = newNode; এই লাইন execute করার পরপরই চেক করলে দেখা যাবে tail নোডটি পয়েন্ট করে আছে এই মাত্র যুক্ত করা newNode-কে। এভাবেই ইচ্ছা মত নােডকে লিস্টের শেষে যুক্ত করতে পারি। বুঝতে হয়ত কিছু সমস্যা হতে পারে, ব্যাপারটা মাথায় নিয়ে একটু মনে মনে ভিজুয়ালাইজ করার চেষ্টা করাে। সাথে কোডটা দেখাে। কোডে যা করা হয়েছে সেটাই উপরে বলা হয়েছে। কোনাে সমস্যা থাকলে কমেন্ট বক্স তাে আছেই!

void insert_at_tail(int value)
{
    node *newNode = getNewNode(value);

    if(head==NULL) //For the 1st element
    {
        head=newNode;
        tail=newNode;
        return;
    }

    //'tail' is a global node. 'newNode' will be the next node of tail.
    //finally newNode will be the 'tail' node of the list
    tail->next = newNode;
    newNode->previous = tail; //'newNode' point 'tail' node as previous node

    tail = newNode; // update the global node 'tail' by newNode.
}

Insert a node at front

আগের ফাংশনটা বুঝে থাকলে এটা বুঝতে সমস্যা হবে না। আগেরটা যেহেতু tail এ নতুন নােড যুক্ত করেছিলাম তাই tail node এর next pointer আপডেট করে এরপর tail কে আপডেট করেছিলাম। এখানে front এ নতুন একটা নােড যােগ করছি, তাই head এর previous পয়েন্টার আপডেট করে এরপর head কে আপডেট করব।

void insert_at_first(int value)
{
    node *newNode = getNewNode(value);

    if(head==NULL) //For the 1st element
    {
        //For now, newNode is the only one node of list
        //So it it is head and also tail
        head=newNode;
        tail=newNode;
        return;
    }

    //newNode will be the NEW HEAD of list.
    //So it'll point to head as 'next node'
    newNode->next = head;
    head->previous = newNode; //before, the previous node of head was NULL. but now newNode

    head = newNode; //update the global node 'head' by newNode
}

Insert a node at middle position

লিস্টের মাঝের যে কোনাে পজিশনে চাইলে আমরা নোড এড করতে পারি। এজন্য লুপ চালিয়ে আমাদের desired পজিশনের আগের পজিশনে এখন কোন নােডটা আছে সেটা বের করতে হবে (ধরি এই নােডর নাম temp)। এরপর নতুন একটা নােড create করে (ধরি এই নোডের নাম newNode) MDa data assign 160 R69 (newNode->number = data). newNode 43 previous link হবে temp. কারণ temp নোডের পরের পজিশনেই আমাদের নতুন নােডটা বসবে।

তাহলে newNode এর পরের নােডটা কী হবে? ঠিক ধরেছ! newNode->next = temp->next. %3D অর্থাৎ নতুন নােড যােগ করার আগে temp node এর পরের নোডটাই হবে নতুন নাডের next link.

void insert_at_middle(int value, int position)
{
    node *newNode = getNewNode(value);

    if(head==NULL) //For the 1st element
    {
        //For now, newNode is the only one node of list
        //So it it is head and also tail
        head=newNode;
        tail=newNode;
        return;
    }

    node *temp = (node *) malloc(sizeof(node));
    temp = head;
    int i = 1;

    //find the position where our newNode will put
    while((i < position-1) && temp->next!=NULL){
        temp = temp->next;
        i++;
    }

    newNode->next = temp->next; //newNode's next node will be the next node of temp
    newNode->previous = temp; //newNode's previous node will be the temp node

    if(temp->next)
        temp->next->previous = newNode; //newNode will be the previous node of temp->next node

    temp->next = newNode; //update the next node of temp
}

Print Doubly Linked List Forward

Order Loop ঘুরিয়ে পুরাে লিস্ট হেড থেকে print করা শুরু করা হয়েছে। Loop break করছে tail node পাওয়া গেলে।

void printLinkedListForward()
{
    printf("\nYour updated linked list in FORWARD ORDER:\n");

    node *myList;
    myList = head;

    while(1)
    {
        if(head==NULL || tail==NULL) break;

        printf("%d ", myList->number);

        if(myList==tail) break;

        myList = myList->next;
    }
    puts("\n");
}


Print Doubly Linked List Reverse Order

লিস্টের tail নােড থেকে প্রিন্ট করা শুরু হয়েছে। লিংক করা হচ্ছে previous পয়েন্টারের সাহায্যে। যখন head এর previous pointer এর মান NULL পাওয়া যাবে তখন loop break হবে। আগের ফাংশনের মত এখানেও লুপ ব্রেক করার জন্য if(myList == head) এভাবেও কন্ডিশন চেক করা যায়।

void printLinkedListBackward()
{
    printf("\nYour full linked list in REVERSE ORDER:\n");

    node *myList;
    myList = tail;

    while(1)
    {
        if(head==NULL || tail==NULL) break;

        printf("%d ", myList->number);

        if(myList->previous==NULL) break;

        myList = myList->previous;
    }
    puts("\n");
}
